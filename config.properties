users_data_file_name=users.json


#DATBASE CONTROLER INITIAL VALUES

database_data = object()
self.database_data = DATABASE_DATA()
tmp_users_list = dict()
lines = file.readlines()
tmp_data = line.split(',')
template = dict()
json_dict = json.load(input_file)
json_string = json.dumps(template, cls=USER_ENCODER, indent=4)

#DATBASE DATA INITIAL VALUES

filename = str()
filename2 = 'users.txt'
lines = file.readlines()
tmp_data = line.split('=')
self.filename = tmp_data[1]

#GAME CONTROLER INTIAL VALUES

game_data = object()
puzzle_controller = object()
database_controller = object()

self.puzzle_controller = PUZZLE_CONTROLLER()
self.database_controller = DATABASE_CONTROLLER()
self.game_data = GAME_DATA()

user_input = str(user_input)

user_input != ""
self.game_data.current_status = "correct"
self.game_data.current_difficulty != "insane"
self.game_data.current_status = "Winner"
self.game_data.current_status = "incorrect"
self.game_data.current_status = "Game Over"
self.game_data.current_difficulty = "easy"

self.game_data.current_streak = str(0)


#GAME DATA INTIAL VALUES

current_streak = str()
current_difficulty = str()
current_attempts = str()

first_number = str()
operation_symbol = str()
second_number = str()
equality_symbol = str()
result_number = str()
correct_answer = str()
current_status = str()

current_win_count = str()
current_lose_count = str()

self.current_streak = str(0)
self.current_attempts = str(3)

self.current_lose_count = str(0)
self.current_win_count = str(0)

self.current_difficulty = "easy"
self.current_status = "Welcome"
self.current_difficulty = "medium"
self.current_difficulty = "hard"
self.current_difficulty = "insane"

self.first_number = puzzle_data.first_number
self.operation_symbol = puzzle_data.operation_symbol
self.second_number = puzzle_data.second_number
self.equality_symbol = puzzle_data.equality_symbol
self.result_number = puzzle_data.result_number
self.correct_answer = puzzle_data.correct_answer


#MAIN INTIAL VALUES
request.method == 'POST'
current_streak=self.render_controller.render_data.current_streak
current_difficulty=self.render_controller.render_data.current_difficulty
current_attempts=self.render_controller.render_data.current_attempts
first_number=self.render_controller.render_data.first_number
operation_symbol=self.render_controller.render_data.operation_symbol
second_number=self.render_controller.render_data.second_number
equality_symbol=self.render_controller.render_data.equality_symbol
result_number=self.render_controller.render_data.result_number
current_status=self.render_controller.render_data.current_status
__name__ == "__main__"
application = APPLICATION_CONTROLLER()


#PUZZLE CONTR0LER INTIAL VALUES

puzzle_data = object()
self.puzzle_data = PUZZLE_DATA()

self.puzzle_data.correct_answer = self.puzzle_data.result_number
Self.puzzle_data.result_number = "?"
self.puzzle_data.correct_answer = self.puzzle_data.second_number
self.puzzle_data.second_number = "?"
self.puzzle_data.correct_answer = self.puzzle_data.operation_symbol
self.puzzle_data.operation_symbol = "?"
self.puzzle_data.correct_answer = "="
temporary_result = self.puzzle_data.result_number
self.puzzle_data.correct_answer = "<"
self.puzzle_data.correct_answer = ">"
self.puzzle_data.equality_symbol = "?"
self.puzzle_data.equality_symbol = "="



#PUZZLE DATA INTIAL VALUES

first_number = int()
operation_symbol = str()
second_number = int()
equality_symbol = str()
result_number = int()
correct_answer = int()

max_value = int()
difficulty = str()

self.equality_symbol = "="

self.max_value = 50
self.max_value = 100
self.max_value = 10
self.max_value = 15




#RENDER CONTROLER VALUES

render_data = object()
self.render_data = RENDER_DATA()

self.render_data.current_streak = input_class.current_streak
self.render_data.current_difficulty = input_class.current_difficulty
self.render_data.current_attempts = input_class.current_attempts
self.render_data.first_number = input_class.first_number
self.render_data.operation_symbol = input_class.operation_symbol
self.render_data.second_number = input_class.second_number
self.render_data.equality_symbol = input_class.equality_symbol
self.render_data.result_number = input_class.result_number
self.render_data.correct_answer = input_class.correct_answer
self.render_data.current_status = input_class.current_status

self.render_data.username = input_class.username
self.render_data.password = input_class.password
self.render_data.user_win_count = input_class.user_win_count
self.render_data.user_lose_count = input_class.user_lose_count
self.render_data.user_current_attempts = input_class.user_current_attempts
self.render_data.user_current_streak = input_class.user_current_streak
self.render_data.user_current_difficulty = input_class.user_current_difficulty
self.render_data.sign_up_confirmation_status = input_class.sign_up_confirmation_status
self.render_data.sign_in_confirmation_status = input_class.sign_in_confirmation_status

#RENDER DATA VALUES

# Game Data
current_streak = str()
current_difficulty = str()
current_attempts = str()
first_number = str()
operation_symbol = str()
second_number = str()
equality_symbol = str()
result_number = str()
correct_answer = str()
current_status = str()

# User Data
username = str()
password = str()
user_win_count = str()
user_lose_count = str()
user_current_streak = str()
user_current_difficulty = str()
user_current_attempts = str()
sign_up_confirmation_status = str()
sign_in_confirmation_status = str()


#USER CONTROLER VALUES


# Local use variables
input_username = str()
input_password = str()
input_confirm_password = str()
users_list = dict()
is_authorized = bool()

# Class instances
user_data = object()
database_controller = object()

self.user_data = USER_DATA()
self.database_controller = DATABASE_CONTROLLER()

self.is_authorized = True
self.users_list = self.database_controller.load_users()
self.input_password == self.users_list[self.input_username]
self.user_data.sign_in_confirmation_status = "Wrong password!"
self.user_data.sign_up_confirmation_status = "Username does not exist!"
self.input_password == self.input_confirm_password
self.user_data.sign_up_confirmation_status = "User created successfully"
self.user_data.sign_up_confirmation_status = "Password must contain at least 8 digit's"
self.user_data.sign_up_confirmation_status = "Username already exists"
self.user_data.sign_up_confirmation_status = "Password's do not match!"

self.user_data.username = self.input_username
self.user_data.password = self.input_password
input_confirm_password=""
self.input_username = input_username
self.input_password = input_password
self.input_confirm_password = input_confirm_password



#USER DATA VALUES

username = str()
password = str()
user_win_count = str()
user_lose_count = str()
user_current_streak = str()
user_current_difficulty = str()
user_current_attempts = str()
sign_up_confirmation_status = str()
sign_in_confirmation_status = str()

self.username = "Username"
self.password = "Password"
self.sign_up_confirmation_status = "Please register new user!"
self.sign_in_confirmation_status = "Welcome, please enter your credentials"
